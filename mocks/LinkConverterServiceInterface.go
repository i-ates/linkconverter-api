// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"
import requests "linkconverter-api/models/requests"
import responses "linkconverter-api/models/responses"

// LinkConverterServiceInterface is an autogenerated mock type for the LinkConverterServiceInterface type
type LinkConverterServiceInterface struct {
	mock.Mock
}

// ConvertDeepToUrl provides a mock function with given fields: deepLinkRequestModel
func (_m *LinkConverterServiceInterface) ConvertDeepToUrl(deepLinkRequestModel requests.DeepLinkRequestModel) (responses.DeepToUrlResponseModel, error) {
	ret := _m.Called(deepLinkRequestModel)

	var r0 responses.DeepToUrlResponseModel
	if rf, ok := ret.Get(0).(func(requests.DeepLinkRequestModel) responses.DeepToUrlResponseModel); ok {
		r0 = rf(deepLinkRequestModel)
	} else {
		r0 = ret.Get(0).(responses.DeepToUrlResponseModel)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(requests.DeepLinkRequestModel) error); ok {
		r1 = rf(deepLinkRequestModel)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConvertUrlToDeep provides a mock function with given fields: urlRequestModel
func (_m *LinkConverterServiceInterface) ConvertUrlToDeep(urlRequestModel requests.UrlRequestModel) (responses.UrlToDeepResponseModel, error) {
	ret := _m.Called(urlRequestModel)

	var r0 responses.UrlToDeepResponseModel
	if rf, ok := ret.Get(0).(func(requests.UrlRequestModel) responses.UrlToDeepResponseModel); ok {
		r0 = rf(urlRequestModel)
	} else {
		r0 = ret.Get(0).(responses.UrlToDeepResponseModel)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(requests.UrlRequestModel) error); ok {
		r1 = rf(urlRequestModel)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
